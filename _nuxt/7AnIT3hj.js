import{g as W,M as V,s as X,D as y,c as C,b as c,n as l,t as a,x as m,o as Y,_ as N}from"./BxaG1xCO.js";const H=["innerHTML"],Z="Building a Secure JWT Authentication System in Node.js: A Comprehensive Guide",b="/generated/blog/building-a-secure-jwt-authentication-system-in-node-js-a-comprehensive-guide/preview.webp",n="",h=W({__name:"building-a-secure-jwt-authentication-system-in-node-js-a-comprehensive-guide",setup(J){const B=new V({html:!0,linkify:!0,typographer:!0}),I=decodeURIComponent(Array.prototype.map.call(atob(n),g=>"%"+("00"+g.charCodeAt(0).toString(16)).slice(-2)).join("")),d=B.render(I),G=X(()=>I.replace(/<\/?[^>]+(>|$)/g,"").slice(0,160));return y({title:Z,meta:[{name:"description",content:G+(G.value.length===160?"...":"")},{property:"og:title",content:Z},{property:"og:image",content:b}]}),(g,s)=>(Y(),C("article",{class:l(g.$style.container)},[c("div",{class:l(g.$style.featuredImage)},[c("img",{src:b,class:l(g.$style.img)},null,2)],2),c("h1",{class:l(g.$style.title)},a(Z),2),c("div",{class:l(g.$style.content),innerHTML:m(d)},null,10,H)],2))}}),o="_container_g8988_1",p="_featuredImage_g8988_12",R="_img_g8988_20",u="_title_g8988_26",z="_content_g8988_41",i={container:o,featuredImage:p,img:R,title:u,content:z},F={$style:i},K=N(h,[["__cssModules",F]]);export{K as default};
