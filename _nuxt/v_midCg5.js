import{g as d,M as m,s as X,D as a,c as Y,b as Z,n as G,t as V,x as y,o as h,_ as C}from"./BxaG1xCO.js";const p=["innerHTML"],b="Building the Modern Web: A Deep Dive into the Complexity Behind Simplicity",c="/generated/blog/building-the-modern-web-a-deep-dive-into-the-complexity-behind-simplicity/preview.webp",R="CgpBdCBhIGdsYW5jZSwgdGhlIG1vZGVybiB3ZWIgZmVlbHMgZWZmb3J0bGVzcy4gV2UgY2xpY2sgYSBidXR0b24gYW5kIGFuIGludGVyYWN0aXZlIGRhc2hib2FyZCBsb2FkcyBpbnN0YW50bHkuIFdlIGZpbGwgb3V0IGEgZm9ybSwgYW5kIHZhbGlkYXRpb24gZmVlZGJhY2sgYXBwZWFycyBiZWZvcmUgd2UgaGl0IHN1Ym1pdC4gQW4gZS1jb21tZXJjZSBzaXRlIHN1Z2dlc3RzIHdoYXQgd2UgbWlnaHQgd2FudCBuZXh0LCBpbiBtaWxsaXNlY29uZHMuIEZvciB1c2VycywgdGhlIGV4cGVyaWVuY2Ugc2VlbXMgc21vb3RoLCByZXNwb25zaXZlLCBhbmQg4oCcc2ltcGxlLuKAnQoKCgoKQnV0IGZvciBkZXZlbG9wZXJz4oCUZXNwZWNpYWxseSB0aG9zZSB3b3JraW5nIGRlZXBseSB3aXRoIEphdmFTY3JpcHQgYW5kIFR5cGVTY3JpcHTigJR3aGF04oCZcyBoYXBwZW5pbmcgdW5kZXIgdGhlIGhvb2QgaXMgYW55dGhpbmcgYnV0IHNpbXBsZS4KCgoKClRoZSBtb2Rlcm4gd2ViIGlzIGEgc29waGlzdGljYXRlZCBlY29zeXN0ZW0uIEZyb250ZW5kIGRldmVsb3BlcnMgYXJlIG5vIGxvbmdlciBqdXN0IG1hbmlwdWxhdGluZyB0aGUgRE9NLiBUaGV54oCZcmUgb3JjaGVzdHJhdGluZyBkaXN0cmlidXRlZCBzeXN0ZW1zLCBiYWxhbmNpbmcgcGVyZm9ybWFuY2Ugd2l0aCBzZWN1cml0eSwgbWFuYWdpbmcgc3RhdGUgd2l0aCBzdXJnaWNhbCBwcmVjaXNpb24sIGFuZCB3cml0aW5nIGNvZGUgdGhhdCBzY2FsZXMgYWNyb3NzIHRlYW1zIGFuZCBwbGF0Zm9ybXMuIFRoaXMgZWNvc3lzdGVtIGRlbWFuZHMgbm90IG9ubHkgdGVjaG5pY2FsIHNraWxsIGJ1dCBhbHNvIGFyY2hpdGVjdHVyYWwgZm9yZXNpZ2h0LCBlbXBhdGh5IGZvciB1c2VyIGV4cGVyaWVuY2UsIGFuZCB0aGUgYWJpbGl0eSB0byBuYXZpZ2F0ZSBhbiBldmVyLWV4cGFuZGluZyB0b29sY2hhaW4uIEluIHRoaXMgcG9zdCwgSeKAmWxsIHVucGFjayB0aGUgY29yZSBsYXllcnMgdGhhdCBtYWtlIHVwIGEgbW9kZXJuIHdlYiBhcHBsaWNhdGlvbiBhbmQgZXhwbG9yZSBob3cgSmF2YVNjcmlwdCBhbmQgVHlwZVNjcmlwdCBjb250aW51ZSB0byBzaGFwZSB0aGlzIGV2ZXItZXZvbHZpbmcgdGVycmFpbi4KCgoKCgoKCgpGcm9tIFBhZ2VzIHRvIFBsYXRmb3JtcwoKCgoKV2Vic2l0ZXMgdXNlZCB0byBiZSBqdXN0IGRvY3VtZW50cy4gQSBkZWNhZGUgYWdvLCBhIHdlYnNpdGUgd2FzIG1vc3RseSBzdGF0aWMsIHByaW1hcmlseSBpbmZvcm1hdGlvbmFsLCBtYXliZSBzcHJpbmtsZWQgd2l0aCBhIGJpdCBvZiBKYXZhU2NyaXB0IGZvciBmb3JtIHZhbGlkYXRpb24gb3Igc2ltcGxlIGFuaW1hdGlvbnMuIFRvZGF5LCB0aGV5IGFyZSBwbGF0Zm9ybXM6IGNvbXBsZXgsIGludGVyYWN0aXZlIGVjb3N5c3RlbXMgdGhhdCBzdXBwb3J0IG11bHRpcGxlIHdvcmtmbG93cywgdXNlciByb2xlcywgYW5kIGRhdGEgc3RyZWFtcyBzaW11bHRhbmVvdXNseS4KCgoKCkNvbnNpZGVyIHdoYXQgYSBtb2Rlcm4gc2luZ2xlLXBhZ2UgYXBwbGljYXRpb24gKFNQQSkgZW50YWlsczogZHluYW1pYyByb3V0aW5nIHRoYXQgZmVlbHMgaW5zdGFudGFuZW91cywgbGl2ZSBkYXRhIHN5bmNpbmcgdGhhdCBrZWVwcyBtdWx0aXBsZSB1c2VycyBpbiB0aGUgc2FtZSBzdGF0ZSwgcmVhbC10aW1lIGNvbGxhYm9yYXRpb24gYWtpbiB0byBHb29nbGUgRG9jcywgb2ZmbGluZSBzdXBwb3J0IHRoYXQgcHJldmVudHMgd29yayBsb3NzLCBmaW5lLWdyYWluZWQgdXNlciByb2xlcyBhbmQgcGVybWlzc2lvbnMgdGhhdCBwcm90ZWN0IHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiwgY29udGludW91cyBpbnRlZ3JhdGlvbiBhbmQgZGVsaXZlcnkgKENJL0NEKSBwaXBlbGluZXMgdGhhdCBhdXRvbWF0ZSBkZXBsb3ltZW50cyBtdWx0aXBsZSB0aW1lcyBhIGRheSwgYW5kIGFkdmFuY2VkIHR5cGUgY2hlY2tpbmcgdGhhdCBrZWVwcyBhIHNwcmF3bGluZyBjb2RlYmFzZSByZWxpYWJsZSDigJQgYWxsIHN0aXRjaGVkIHRvZ2V0aGVyIGluIGNvZGUgdGhhdCBjb21waWxlcyBkb3duIHRvIGEgZmV3IG1lZ2FieXRlcyBvZiBKYXZhU2NyaXB0LgoKCgoKVGhpcyB0cmFuc2Zvcm1hdGlvbiBkaWRu4oCZdCBoYXBwZW4gb3Zlcm5pZ2h0LiBJdOKAmXMgdGhlIHJlc3VsdCBvZiBpbm5vdmF0aW9ucyBhbmQgbGVzc29ucyBsZWFybmVkIGFjcm9zcyBhIGRlY2FkZSBvciBtb3JlIG9mIGl0ZXJhdGlvbi4gVGhlIGVjb3N5c3RlbSBldm9sdmVkIGFsb25nc2lkZSB1c2VyIGV4cGVjdGF0aW9ucyBhbmQgdGVjaG5vbG9naWNhbCBicmVha3Rocm91Z2hzIGluIGJyb3dzZXJzLCBuZXR3b3JrcywgYW5kIGRldmVsb3BlciB0b29scy4gTGV04oCZcyBleHBsb3JlIHRoZSBtYWpvciBwaWxsYXJzIG9mIHRoaXMgY29tcGxleGl0eSwgZWFjaCBvZiB3aGljaCBoYXMgYmVjb21lIGEgcmVxdWlyZWQgY29tcGV0ZW5jeSBmb3IgZGV2ZWxvcGVycyBidWlsZGluZyBhbnl0aGluZyBiZXlvbmQgc3RhdGljIHNpdGVzLgoKCgoKCgoKCjEuIFVJL1VYOiBEZXNpZ25pbmcgZm9yIEV2ZXJ5IENvbnRleHQKCgoKClVzZXIgaW50ZXJmYWNlIGFuZCB1c2VyIGV4cGVyaWVuY2UgYXJlIHdoZXJlIGV2ZXJ5dGhpbmcgYmVnaW5zIOKAlCBhbmQgb2Z0ZW4gd2hlcmUgdXNlcnMgZm9ybSB0aGVpciBsYXN0aW5nIGltcHJlc3Npb25zLiBEZXNpZ25pbmcgVUkvVVggZm9yIG1vZGVybiB3ZWIgYXBwcyBtZWFucyBjYXRlcmluZyB0byBhIGRpdmVyc2Ugc2V0IG9mIGRldmljZXMsIHVzZXIgbmVlZHMsIGFuZCBhY2Nlc3NpYmlsaXR5IHJlcXVpcmVtZW50cy4KCgoKCkFjY2Vzc2liaWxpdHkKCgoKCk1ha2luZyBhcHBsaWNhdGlvbnMgYWNjZXNzaWJsZSBpcyBubyBsb25nZXIgb3B0aW9uYWw7IGl04oCZcyBhIGxlZ2FsIGFuZCBldGhpY2FsIHJlc3BvbnNpYmlsaXR5LiBBY2Nlc3NpYmlsaXR5IGVuc3VyZXMgdGhhdCB1c2VycyB3aXRoIGRpc2FiaWxpdGllcyDigJQgd2hldGhlciB2aXN1YWwsIGF1ZGl0b3J5LCBtb3Rvciwgb3IgY29nbml0aXZlIOKAlCBjYW4gdXNlIHlvdXIgYXBwIGVmZmVjdGl2ZWx5LiBUaGlzIGludm9sdmVzIHNlbWFudGljIEhUTUwsIHByb3BlciBBUklBIHJvbGVzIHRvIGNvbW11bmljYXRlIG1lYW5pbmcgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywga2V5Ym9hcmQgbmF2aWdhYmlsaXR5IGZvciB0aG9zZSB3aG8gY2Fubm90IHVzZSBhIG1vdXNlLCBhbmQgc2NyZWVuIHJlYWRlciBjb21wYXRpYmlsaXR5LiBBY2Nlc3NpYmlsaXR5IGlzbuKAmXQganVzdCBhYm91dCBjb21wbGlhbmNlOyBpdOKAmXMgYWJvdXQgaW5jbHVzaXZpdHksIGFuZCBpdCByZXF1aXJlcyBkZXZlbG9wZXJzIHRvIHRoaW5rIGJleW9uZCB0aGUgdmlzdWFsLgoKCgoKUmVzcG9uc2l2ZW5lc3MKCgoKCkRldmljZXMgdmFyeSBmcm9tIHRpbnkgc21hcnR3YXRjaCBzY3JlZW5zIHRvIHVsdHJhLXdpZGUgZGVza3RvcCBtb25pdG9ycywgYW5kIGV2ZXJ5dGhpbmcgaW4gYmV0d2Vlbi4gUmVzcG9uc2l2ZSBkZXNpZ24gaXMgY3J1Y2lhbCB0byBkZWxpdmVyIGEgY29uc2lzdGVudCBleHBlcmllbmNlIGFjcm9zcyB0aGlzIHNwZWN0cnVtLiBUZWNobmlxdWVzIGxpa2UgbWVkaWEgcXVlcmllcywgZmx1aWQgZ3JpZCBzeXN0ZW1zLCBmbGV4aWJsZSB0eXBvZ3JhcGh5LCBhbmQgaW1hZ2Ugb3B0aW1pemF0aW9uIGhlbHAuIEZyYW1ld29ya3MgbGlrZSBUYWlsd2luZCBDU1MgaGF2ZSBwdXNoZWQgdXRpbGl0eS1maXJzdCBkZXNpZ24gaW50byB0aGUgbWFpbnN0cmVhbSwgZW5hYmxpbmcgcmFwaWQsIG1haW50YWluYWJsZSBzdHlsaW5nIHdpdGhvdXQgaGVhdnkgQ1NTIGZpbGVzIG9yIHNwZWNpZmljaXR5IHdhcnMuCgoKCgpBbmltYXRpb25zCgoKCgpNaWNyby1pbnRlcmFjdGlvbnMg4oCUIHRob3NlIHN1YnRsZSBhbmltYXRpb25zIHRoYXQgcHJvdmlkZSBmZWVkYmFjayBvciBndWlkZSBhdHRlbnRpb24g4oCUIGhhdmUgYmVjb21lIGV4cGVjdGF0aW9ucy4gQW5pbWF0aW9uIGxpYnJhcmllcyBsaWtlIEZyYW1lciBNb3Rpb24gYW5kIEdTQVAgYWxsb3cgZGV2ZWxvcGVycyB0byBjcmVhdGUgc21vb3RoLCBwZXJmb3JtYW50IGFuaW1hdGlvbnMgd2l0aCBsZXNzIGZyaWN0aW9uLiBIb3dldmVyLCBleGNlc3NpdmUgb3IgcG9vcmx5IG9wdGltaXplZCBtb3Rpb24gY2FuIGRlZ3JhZGUgcGVyZm9ybWFuY2UgYW5kIGRpc3RyYWN0IHVzZXJzLiBNYXN0ZXJpbmcgYW5pbWF0aW9uIG1lYW5zIHVuZGVyc3RhbmRpbmcgdGltaW5nLCBlYXNpbmcsIGFuZCBpbXBhY3Qgb24gYWNjZXNzaWJpbGl0eSAoZS5nLiwgbW90aW9uLXJlZHVjZWQgcHJlZmVyZW5jZXMpLgoKCgoKCgoKCjIuIFN0YXRlIE1hbmFnZW1lbnQ6IE5hdmlnYXRpbmcgdGhlIENoYW9zCgoKCgpBcyBhcHBsaWNhdGlvbnMgZ3JvdywgbWFuYWdpbmcgZGF0YSBiZWNvbWVzIGV4cG9uZW50aWFsbHkgaGFyZGVyLiBUaGUgY2hhbGxlbmdlIGlzbuKAmXQganVzdCBzdG9yaW5nIHZhbHVlcyDigJQgaXTigJlzIHN5bmNocm9uaXppbmcgdGhlbSwgdHJhY2tpbmcgY2hhbmdlcywgYXZvaWRpbmcgcmFjZSBjb25kaXRpb25zLCBhbmQga2VlcGluZyB0aGUgVUkgaW4gc3luYyB3aXRob3V0IHVubmVjZXNzYXJ5IHJlLXJlbmRlcnMuCgoKCgpHbG9iYWwgU3RhdGUKCgoKCkdsb2JhbCBzdGF0ZSBtYW5hZ2VtZW50IGxpYnJhcmllcyBvZmZlciBhIGNlbnRyYWxpemVkIHNvdXJjZSBvZiB0cnV0aC4gUmVkdXgsIGZvciBleGFtcGxlLCBlbXBoYXNpemVzIGV4cGxpY2l0IGNvbnRyb2wgd2l0aCByZWR1Y2VycyBhbmQgaW1tdXRhYmxlIHN0YXRlIHVwZGF0ZXMsIGJ1dCBjYW4gZmVlbCB2ZXJib3NlLiBOZXdlciBsaWJyYXJpZXMgbGlrZSBadXN0YW5kIHByb3ZpZGUgYSBzaW1wbGVyLCBtb3JlIFJlYWN0LWVzcXVlIEFQSSwgaW1wcm92aW5nIGVyZ29ub21pY3Mgd2l0aG91dCBzYWNyaWZpY2luZyBmbGV4aWJpbGl0eS4gRWFjaCBsaWJyYXJ5IGhhcyB0cmFkZS1vZmZzIGluIGNvbXBsZXhpdHksIGRlYnVnZ2luZywgYW5kIHBlcmZvcm1hbmNlLgoKCgoKTG9jYWwgU3RhdGUKCgoKCk5vdCBhbGwgc3RhdGUgYmVsb25ncyBpbiBhIGdsb2JhbCBzdG9yZS4gUmVhY3TigJlzIHVzZVN0YXRlIGFuZCB1c2VSZWR1Y2VyIGhvb2tzIHJlbWFpbiBlc3NlbnRpYWwgZm9yIG1hbmFnaW5nIGNvbXBvbmVudC1zcGVjaWZpYyBzdGF0ZS4gWWV0LCBkZWNpZGluZyB3aGVyZSBzdGF0ZSBsaXZlc+KAlGxvY2FsLCBnbG9iYWwsIG9yIHNlcnZlcuKAlHJlcXVpcmVzIGNhcmVmdWwgY29uc2lkZXJhdGlvbiwgZXNwZWNpYWxseSBhcyBhcHBzIHNjYWxlLiBTdHJhdGVnaWVzIGxpa2Ug4oCcbGlmdGluZyBzdGF0ZSB1cOKAnSBvciB1c2luZyBjb250ZXh0IGNhbiBhdm9pZCBwcm9wLWRyaWxsaW5nIGJ1dCBpbnRyb2R1Y2Ugb3RoZXIgY29tcGxleGl0aWVzLgoKCgoKU2VydmVyIFN0YXRlCgoKCgpTZXJ2ZXIgc3RhdGUg4oCUIGRhdGEgZmV0Y2hlZCBmcm9tIEFQSXMg4oCUIGludHJvZHVjZXMgYW5vdGhlciBsYXllciBvZiBjaGFsbGVuZ2UuIEl0IGNhbiBiZSBzdGFsZSwgcGFnaW5hdGVkLCBvciBwcm9uZSB0byBlcnJvcnMuIExpYnJhcmllcyBsaWtlIFJlYWN0IFF1ZXJ5IGFuZCBTV1IgYWJzdHJhY3QgbXVjaCBvZiB0aGlzIGNvbXBsZXhpdHksIHByb3ZpZGluZyBjYWNoaW5nLCBhdXRvbWF0aWMgcmUtZmV0Y2hpbmcsIGFuZCBtdXRhdGlvbiBzdXBwb3J0LiBUaGlzIGRyYW1hdGljYWxseSBpbXByb3ZlcyBkZXZlbG9wZXIgcHJvZHVjdGl2aXR5IGJ1dCByZXF1aXJlcyB1bmRlcnN0YW5kaW5nIG9mIHVuZGVybHlpbmcgbmV0d29yayBwYXR0ZXJucyBhbmQgZXJyb3IgaGFuZGxpbmcuCgoKCgoKCgoKMy4gQVBJIEludGVncmF0aW9uOiBDb25uZWN0aW5nIHRoZSBQaWVjZXMKCgoKCk5vIGFwcCBsaXZlcyBpbiBhIHZhY3V1bS4gQVBJIGludGVncmF0aW9uIGlzIHRoZSBjaXJjdWxhdG9yeSBzeXN0ZW0gb2YgbW9kZXJuIHdlYiBhcHBsaWNhdGlvbnMuIEhvdyB5b3UgY29ubmVjdCB0byBiYWNrZW5kIHNlcnZpY2VzIGluZmx1ZW5jZXMgYXBwIHJlc3BvbnNpdmVuZXNzLCByZWxpYWJpbGl0eSwgYW5kIGNvbXBsZXhpdHkuCgoKCgpSRVNUCgoKCgpSRVNUZnVsIEFQSXMgcmVtYWluIGRvbWluYW50IGR1ZSB0byB0aGVpciBzaW1wbGljaXR5IGFuZCB3aWRlc3ByZWFkIGFkb3B0aW9uLiBZZXQsIGhhbmRsaW5nIGVkZ2UgY2FzZXMgbGlrZSBwYWdpbmF0aW9uLCBmaWx0ZXJpbmcsIGFuZCBuZXN0ZWQgcmVzb3VyY2VzIGNhbiBiZWNvbWUgY3VtYmVyc29tZS4gRXJyb3IgaGFuZGxpbmcgYW5kIHJldHJ5IHN0cmF0ZWdpZXMgb2Z0ZW4gbmVlZCB0byBiZSBpbXBsZW1lbnRlZCBjbGllbnQtc2lkZSwgaW5jcmVhc2luZyBjb21wbGV4aXR5LgoKCgoKR3JhcGhRTAoKCgoKR3JhcGhRTCBvZmZlcnMgYSBtb3JlIGZsZXhpYmxlIGFsdGVybmF0aXZlLCBlbmFibGluZyBjbGllbnRzIHRvIHJlcXVlc3QgZXhhY3RseSB3aGF0IHRoZXkgbmVlZCwgcmVkdWNpbmcgb3Zlci1mZXRjaGluZyBhbmQgdW5kZXItZmV0Y2hpbmcgcHJvYmxlbXMuIEhvd2V2ZXIsIGl0IGludHJvZHVjZXMgbmV3IGNoYWxsZW5nZXMgc3VjaCBhcyBjYWNoaW5nIGNvbXBsZXhpdHksIHF1ZXJ5IG9wdGltaXphdGlvbiwgYW5kIGluY3JlYXNlZCBzZXJ2ZXItc2lkZSB3b3JrbG9hZC4gVG9vbGluZyBsaWtlIEFwb2xsbyBDbGllbnQgb3IgUmVsYXkgY2FuIG1pdGlnYXRlIHNvbWUgb2YgdGhlc2UgaXNzdWVzIGJ1dCBhZGQgdG8gdGhlIGxlYXJuaW5nIGN1cnZlLgoKCgoKV2ViU29ja2V0cwoKCgoKRm9yIHJlYWwtdGltZSB1cGRhdGVzIOKAlCB0aGluayBjaGF0IGFwcHMsIGxpdmUgZGFzaGJvYXJkcywgb3IgY29sbGFib3JhdGl2ZSBlZGl0aW5nIOKAlCBXZWJTb2NrZXRzIGVuYWJsZSBsb3ctbGF0ZW5jeSwgYmlkaXJlY3Rpb25hbCBjb21tdW5pY2F0aW9uLiBJbXBsZW1lbnRpbmcgdGhlbSBzZWN1cmVseSBhbmQgcmVsaWFibHkgaXMgbm9uLXRyaXZpYWwsIG9mdGVuIHJlcXVpcmluZyBmYWxsYmFjayBzdHJhdGVnaWVzIGFuZCByb2J1c3QgcmVjb25uZWN0aW9uIGxvZ2ljLiBUaGUgYmVuZWZpdHMgYXJlIGh1Z2UsIGJ1dCBpdCBkZW1hbmRzIGFyY2hpdGVjdHVyYWwgY29uc2lkZXJhdGlvbi4KCgoKCgoKCgo0LiBUeXBlIFNhZmV0eSAmIFRvb2xpbmc6IFRoZSBUeXBlU2NyaXB0IEVmZmVjdAoKCgoKSmF2YVNjcmlwdCBnYXZlIHVzIGR5bmFtaXNtLCBmbGV4aWJpbGl0eSwgYW5kIGEgbWFzc2l2ZSBlY29zeXN0ZW0uIFR5cGVTY3JpcHQgZ2l2ZXMgdXMgc2FuaXR5LCBkaXNjaXBsaW5lLCBhbmQgbWFpbnRhaW5hYmlsaXR5IGF0IHNjYWxlLgoKCgoKVHlwZVNjcmlwdCBoYXMgYmVjb21lIHRoZSBzdGFuZGFyZCBmb3IgdGVhbXMgYnVpbGRpbmcgYW55dGhpbmcgc2VyaW91cy4gSXRzIGJlbmVmaXRzIOKAlCBlYXJseSBlcnJvciBkZXRlY3Rpb24sIElERSBhdXRvY29tcGxldGlvbiwgZW5mb3JjZWFibGUgY29udHJhY3RzIOKAlCByZWR1Y2UgYnVncyBhbmQgaW1wcm92ZSBjb2xsYWJvcmF0aW9uLiBCeSBjYXRjaGluZyBtaXN0YWtlcyBiZWZvcmUgcnVudGltZSwgVHlwZVNjcmlwdCBoZWxwcyBwcmV2ZW50IGNvc3RseSBwcm9kdWN0aW9uIGJ1Z3MuCgoKCgpMaW50aW5nICYgRm9ybWF0dGluZwoKCgoKQ29uc2lzdGVudCBjb2RlIHN0eWxlIGFuZCBjb252ZW50aW9ucyBwcmV2ZW50IOKAnGNvZGUgcm904oCdIGluIHRlYW1zLiBUb29scyBsaWtlIEVTTGludCBhbmQgUHJldHRpZXIgYXV0b21hdGljYWxseSBlbmZvcmNlIHJ1bGVzIGFuZCBzdHlsZXMsIG1ha2luZyBjb2RlYmFzZXMgbW9yZSBhcHByb2FjaGFibGUgYW5kIHVuaWZvcm0uIENvbWJpbmVkIHdpdGggVHlwZVNjcmlwdOKAmXMgc3RhdGljIHR5cGVzLCB0aGVzZSB0b29scyB0cmFuc2Zvcm0gY29kZWJhc2VzIGludG8gY29sbGFib3JhdGl2ZSwgbWFpbnRhaW5hYmxlIGFzc2V0cyByYXRoZXIgdGhhbiBmcmFnaWxlIGFydGlmYWN0cy4KCgoKCkRldmVsb3BlciBFeHBlcmllbmNlIChEWCkKCgoKCk1vZGVybiB0b29saW5nIGlzbuKAmXQganVzdCBhYm91dCB3cml0aW5nIGNvZGUg4oCUIGl04oCZcyBhYm91dCBtYWtpbmcgZGV2ZWxvcGVycyBmYXN0ZXIgYW5kIG1vcmUgY29uZmlkZW50LiBWUyBDb2RlIGV4dGVuc2lvbnMsIHR5cGVkIEFQSXMsIGN1c3RvbSBFU0xpbnQgcnVsZXMsIGFuZCBpbnRlZ3JhdGVkIHRlc3Rpbmcgd29ya2Zsb3dzIGhlbHAgZGV2ZWxvcGVycyBjYXRjaCBlcnJvcnMgZWFybHkgYW5kIHNwZW5kIG1vcmUgdGltZSBzb2x2aW5nIGJ1c2luZXNzIHByb2JsZW1zIGluc3RlYWQgb2YgZGVidWdnaW5nLgoKCgoKCgoKCjUuIFBlcmZvcm1hbmNlIE9wdGltaXphdGlvbjogTWFraW5nIFNwZWVkIEludmlzaWJsZQoKCgoKVXNlcnMgZXhwZWN0IGluc3RhbnQgbG9hZGluZywgc21vb3RoIHRyYW5zaXRpb25zLCBhbmQgemVybyBqYW5rLiBQZXJmb3JtYW5jZSBoYXMgYmVjb21lIGEgdG9wLXRpZXIgVVggaXNzdWUsIGluZmx1ZW5jaW5nIHVzZXIgcmV0ZW50aW9uIGFuZCBzYXRpc2ZhY3Rpb24uCgoKCgpDb2RlIFNwbGl0dGluZwoKCgoKU3BsaXR0aW5nIGNvZGUgaW50byBzbWFsbGVyIGNodW5rcyBoZWxwcyByZWR1Y2UgaW5pdGlhbCBsb2FkIHRpbWUuIFRvb2xzIGxpa2UgV2VicGFjayBhbmQgVml0ZSBlbmFibGUgdGhpcyBvdXQgb2YgdGhlIGJveCwgYW5kIGZyYW1ld29ya3MgbGlrZSBOZXh0LmpzIHRha2UgaXQgZnVydGhlciBieSBhdXRvbWF0aW5nIHNwbGl0dGluZyBhdCB0aGUgcGFnZSBhbmQgY29tcG9uZW50IGxldmVsLiBQcm9wZXIgY29kZSBzcGxpdHRpbmcgcmVxdWlyZXMgdW5kZXJzdGFuZGluZyBkZXBlbmRlbmNpZXMgYW5kIHVzYWdlIHBhdHRlcm5zLgoKCgoKTGF6eSBMb2FkaW5nCgoKCgpEZWZlcnJpbmcgdGhlIGxvYWRpbmcgb2Ygbm9uLWNyaXRpY2FsIGNvbXBvbmVudHMgb3IgaW1hZ2VzIHVudGlsIG5lZWRlZCBpbXByb3ZlcyB0aW1lIHRvIGZpcnN0IHBhaW50IGFuZCByZWR1Y2VzIHJlc291cmNlIGNvbnN1bXB0aW9uLiBDb21iaW5lZCB3aXRoIEludGVyc2VjdGlvbk9ic2VydmVyLCBsYXp5IGxvYWRpbmcgaXMgbm93IGEgc3RhbmRhcmQgcGF0dGVybiB0aGF0IGJhbGFuY2VzIHBlcmNlaXZlZCBzcGVlZCB3aXRoIGFjdHVhbCByZXNvdXJjZSBsb2FkaW5nLgoKCgoKU1NSIGFuZCBTU0cKCgoKClNlcnZlci1zaWRlIHJlbmRlcmluZyAoU1NSKSBhbmQgc3RhdGljIHNpdGUgZ2VuZXJhdGlvbiAoU1NHKSBpbXByb3ZlIGJvdGggcGVyZm9ybWFuY2UgYW5kIFNFTyBieSBkZWxpdmVyaW5nIGZ1bGx5IHJlbmRlcmVkIEhUTUwgdG8gdGhlIGNsaWVudC4gRnJhbWV3b3JrcyBsaWtlIE5leHQuanMsIEFzdHJvLCBhbmQgUmVtaXggZW5hYmxlIGh5YnJpZCByZW5kZXJpbmcgc3RyYXRlZ2llcywgbGV0dGluZyBkZXZlbG9wZXJzIGJhbGFuY2UgYnVpbGQtdGltZSBnZW5lcmF0aW9uIHdpdGggZHluYW1pYyBzZXJ2ZXItc2lkZSBjb250ZW50IGFzIG5lZWRlZC4KCgoKCgoKCgo2LiBEZXBsb3ltZW50ICYgQ0kvQ0Q6IEZyb20gQ29kZSB0byBQcm9kdWN0aW9uCgoKCgpPbmNlIHlvdXIgYXBwIGlzIHJlYWR5LCBzaGlwcGluZyBpdCBlZmZpY2llbnRseSBhbmQgc2FmZWx5IGlzIGFub3RoZXIgYmVhc3QgZW50aXJlbHkuCgoKCgpQbGF0Zm9ybXMKCgoKCk1vZGVybiBob3N0aW5nIHBsYXRmb3JtcyBsaWtlIFZlcmNlbCBhbmQgTmV0bGlmeSBhYnN0cmFjdCBhd2F5IG11Y2ggb2YgdGhlIG9wZXJhdGlvbmFsIGJ1cmRlbi4gVGhleSBwcm92aWRlIHNlcnZlcmxlc3MgZnVuY3Rpb25zLCBlZGdlIGNhY2hpbmcsIHByZXZpZXdzLCBhbmQgYW5hbHl0aWNzLCBhbGwgaW50ZWdyYXRlZCB3aXRoIGdpdCB3b3JrZmxvd3MuIFRoaXMgYWxsb3dzIHRlYW1zIHRvIGRlcGxveSBtdWx0aXBsZSB0aW1lcyBhIGRheSB3aXRoIG1pbmltYWwgZnJpY3Rpb24uCgoKCgpDSS9DRAoKCgoKQ29udGludW91cyBpbnRlZ3JhdGlvbiBhbmQgZGVsaXZlcnkgcGlwZWxpbmVzIHVzaW5nIEdpdEh1YiBBY3Rpb25zLCBHaXRMYWIgQ0ksIG9yIENpcmNsZUNJIGF1dG9tYXRlIHRlc3RpbmcsIGxpbnRpbmcsIGJ1aWxkcywgYW5kIGRlcGxveW1lbnRzLiBBIHJvYnVzdCBDSSBwaXBlbGluZSBpcyB0aGUgYmFja2JvbmUgb2YgcXVhbGl0eSBhc3N1cmFuY2UsIGNhdGNoaW5nIHJlZ3Jlc3Npb25zIGFuZCBlbnN1cmluZyBwcm9kdWN0aW9uIHN0YWJpbGl0eSBpbiBmYXN0LW1vdmluZyB0ZWFtcy4KCgoKClByZXZpZXcgRW52aXJvbm1lbnRzCgoKCgpFcGhlbWVyYWwgcHJldmlldyBlbnZpcm9ubWVudHMgc3BpbiB1cCBpc29sYXRlZCBpbnN0YW5jZXMgb2YgYSBicmFuY2ggb3IgZmVhdHVyZS4gVGhleSBlbmFibGUgc3Rha2Vob2xkZXJzIHRvIGludGVyYWN0IHdpdGggbmV3IGZlYXR1cmVzIGJlZm9yZSBnb2luZyBsaXZlLCBjbG9zaW5nIHRoZSBmZWVkYmFjayBsb29wIGFuZCByZWR1Y2luZyByZWdyZXNzaW9uIHJpc2tzLiBUaGVzZSBlbnZpcm9ubWVudHMgZGVtb2NyYXRpemUgUUEgYW5kIGFjY2VsZXJhdGUgaXRlcmF0aW9uLgoKCgoKCgoKCjcuIFNlY3VyaXR5OiBUaGUgSW52aXNpYmxlIFBpbGxhcgoKCgoKU2VjdXJpdHkgaXNu4oCZdCBmbGFzaHksIGJ1dCBpdOKAmXMgY3JpdGljYWwuIEV2ZXJ5IGxheWVyIG9mIHlvdXIgc3RhY2sgbXVzdCBiZSBoYXJkZW5lZCBhZ2FpbnN0IGFidXNlIGFuZCBhdHRhY2suCgoKCgpBdXRoZW50aWNhdGlvbiAmIEF1dGhvcml6YXRpb24KCgoKCk1hbmFnaW5nIHVzZXIgaWRlbnRpdHkgYW5kIGFjY2VzcyBpcyBmb3VuZGF0aW9uYWwuIE9BdXRoLCBKV1RzLCBhbmQgdGhpcmQtcGFydHkgYXV0aCBwcm92aWRlcnMgbGlrZSBBdXRoMCBvciBDbGVyayBzaW1wbGlmeSB0aGlzIGJ1dCBlYWNoIGFwcHJvYWNoIGhhcyB0cmFkZS1vZmZzLiBQcm9wZXIgc2Vzc2lvbiBtYW5hZ2VtZW50LCB0b2tlbiByZW5ld2FsLCBhbmQgZmluZS1ncmFpbmVkIHBlcm1pc3Npb25zIHJlcXVpcmUgY2FyZWZ1bCBkZXNpZ24gdG8gYXZvaWQgdnVsbmVyYWJpbGl0aWVzLgoKCgoKSFRUUFMgJiBUTFMKCgoKCkVuY3J5cHRpbmcgYWxsIHRyYWZmaWMgd2l0aCBIVFRQUyBpcyBub3cgYmFzZWxpbmUuIFBsYXRmb3JtcyBsaWtlIFZlcmNlbCBhbmQgQ2xvdWRmbGFyZSBtYWtlIGNlcnRpZmljYXRlIHByb3Zpc2lvbmluZyBhbmQgcmVuZXdhbCBlZmZvcnRsZXNzLCBidXQgdW5kZXJzdGFuZGluZyBUTFMsIEhTVFMgcG9saWNpZXMsIGFuZCBwb3RlbnRpYWwgcGl0ZmFsbHMgcmVtYWlucyBlc3NlbnRpYWwuCgoKCgpDU1AsIENPUlMsIFhTUwoKCgoKU2VjdXJpdHkgaGVhZGVycyBzdWNoIGFzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IChDU1ApIGhlbHAgcHJldmVudCBjcm9zcy1zaXRlIHNjcmlwdGluZyAoWFNTKSBieSByZXN0cmljdGluZyB3aGF0IHNjcmlwdHMgY2FuIHJ1bi4gQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpIHBvbGljaWVzIGNvbnRyb2wgd2hpY2ggZG9tYWlucyBjYW4gYWNjZXNzIHlvdXIgQVBJcy4gTWlzY29uZmlndXJhdGlvbiBpbiBlaXRoZXIgY2FuIGV4cG9zZSBjcml0aWNhbCB2dWxuZXJhYmlsaXRpZXMuIFNlY3VyaXR5IGlzIGEgbW92aW5nIHRhcmdldCwgZGVtYW5kaW5nIGNvbnRpbnVvdXMgdmlnaWxhbmNlLgoKCgoKCgoKCldoeSBUaGlzIENvbXBsZXhpdHkgTWF0dGVycwoKCgoKVGhlIGNvbXBsZXhpdHkgb2YgbW9kZXJuIHdlYiBkZXZlbG9wbWVudCBpc27igJl0IGp1c3QgYSB0ZWNobmljYWwgY2hhbGxlbmdlIOKAlCBpdOKAmXMgYSByZWZsZWN0aW9uIG9mIHRoZSB3b3JsZCB3ZeKAmXJlIGJ1aWxkaW5nIGZvci4gVXNlcnMgZXhwZWN0IGFwcHMgdG8gYmUgZmFzdCwgcmVsaWFibGUsIHNlY3VyZSwgYW5kIHBlcnNvbmFsaXplZC4gQnVzaW5lc3NlcyBkZW1hbmQgc2NhbGFiaWxpdHksIG9ic2VydmFiaWxpdHksIGFuZCBzcGVlZCB0byBtYXJrZXQuIERldmVsb3BlcnMgYXJlIGF0IHRoZSBpbnRlcnNlY3Rpb24gb2YgYWxsIHRoZXNlIHByZXNzdXJlcy4KCgoKCkphdmFTY3JpcHQgYW5kIFR5cGVTY3JpcHQgZ2l2ZSB1cyB0aGUgdG9vbHMgdG8gbWVldCB0aGVzZSBjaGFsbGVuZ2VzLCBidXQgdGhleSBkb27igJl0IG1ha2UgdGhlbSBnbyBhd2F5LiBJdOKAmXMgc3RpbGwgb24gdXMg4oCUIHRoZSBidWlsZGVycyDigJQgdG8gbWFzdGVyIHRoZSBsYXllcnMsIGFzayBoYXJkIHF1ZXN0aW9ucywgYW5kIGtlZXAgbGVhcm5pbmcuCgoKCgpBbmQgbWF5YmUgdGhhdOKAmXMgdGhlIG1vc3QgZXhjaXRpbmcgcGFydCBvZiBhbGw6IHdlYiBkZXZlbG9wbWVudCBpbiAyMDI1IGlzIG5vIGxvbmdlciBhIGpvYiBmb3IgZ2VuZXJhbGlzdHMuIEl04oCZcyBhIGxhbmRzY2FwZSB3aGVyZSBzcGVjaWFsaXphdGlvbiBhbmQgY3VyaW9zaXR5IGdvIGhhbmQgaW4gaGFuZC4gVGhlcmXigJlzIGFsd2F5cyBhIG5ldyBhYnN0cmFjdGlvbiB0byB1bnBhY2ssIGEgcGVyZm9ybWFuY2UgdHJpY2sgdG8gdGVzdCwgb3IgYSBiZXR0ZXIgd2F5IHRvIG1vZGVsIHlvdXIgZGF0YS4KCgoKCgoKCgpJbiBDbG9zaW5nOiBUaGUgQmVhdXR5IEJlaGluZCB0aGUgQnJvd3NlcgoKCgoKTmV4dCB0aW1lIHlvdSBvcGVuIGEgc2xlZWssIHNpbmdsZS1wYWdlIGFwcGxpY2F0aW9uIGFuZCBtYXJ2ZWwgYXQgaXRzIHJlc3BvbnNpdmVuZXNzLCByZW1lbWJlciB3aGF0IHdlbnQgaW50byBpdCDigJQgdGhlIGFyY2hpdGVjdHVyZSwgdGhlIHRvb2xpbmcsIHRoZSBlZGdlLWNhc2Ugd3JhbmdsaW5nLCB0aGUgc2VjdXJpdHkgaGFyZGVuaW5nLCBhbmQgdGhlIGRlc2lnbiBpdGVyYXRpb24uCgoKCgpBcyB3ZWIgZGV2ZWxvcGVycywgd2UgZG9u4oCZdCBqdXN0IGNvZGUgVUlzLiBXZSBjcmVhdGUgc3lzdGVtcyB0aGF0IGZlZWwgYWxpdmUuIFN5c3RlbXMgdGhhdCBhZGFwdCwgdmFsaWRhdGUsIHRyYW5zZm9ybSwgYW5kIHJlc3BvbmQg4oCUIGFsbCBpbiBhIGZldyBodW5kcmVkIGtpbG9ieXRlcyBvZiBidW5kbGVkIEphdmFTY3JpcHQgYW5kIFR5cGVTY3JpcHQuCgoKCgpUaGF04oCZcyBhIGNyYWZ0IHdvcnRoIG1hc3RlcmluZy4KCgoKCgoKCgoKCgo=",u=d({__name:"building-the-modern-web-a-deep-dive-into-the-complexity-behind-simplicity",setup(J){const I=new m({html:!0,linkify:!0,typographer:!0}),B=decodeURIComponent(Array.prototype.map.call(atob(R),l=>"%"+("00"+l.charCodeAt(0).toString(16)).slice(-2)).join("")),W=I.render(B),g=X(()=>B.replace(/<\/?[^>]+(>|$)/g,"").slice(0,160));return a({title:b,meta:[{name:"description",content:g+(g.value.length===160?"...":"")},{property:"og:title",content:b},{property:"og:image",content:c}]}),(l,z)=>(h(),Y("article",{class:G(l.$style.container)},[Z("div",{class:G(l.$style.featuredImage)},[Z("img",{src:c,class:G(l.$style.img)},null,2)],2),Z("h1",{class:G(l.$style.title)},V(b),2),Z("div",{class:G(l.$style.content),innerHTML:y(W)},null,10,p)],2))}}),F="_container_g8988_1",N="_featuredImage_g8988_12",o="_img_g8988_20",n="_title_g8988_26",s="_content_g8988_41",H={container:F,featuredImage:N,img:o,title:n,content:s},i={$style:H},v=C(u,[["__cssModules",i]]);export{v as default};
