import{g as d,M as m,s as Y,D as y,c as V,b,n as g,t as a,x as X,o as h,_ as C}from"./BxaG1xCO.js";const H=["innerHTML"],Z="The Ultimate Open-Source Project Roadmap for Web Developers: From Beginner to Pro (with JavaScript Starters)",I="/generated/blog/the-ultimate-open-source-project-roadmap-for-web-developers-from-beginner-to-pro-with-javascript-starters/preview.webp",R="",p=d({__name:"the-ultimate-open-source-project-roadmap-for-web-developers-from-beginner-to-pro-with-javascript-starters",setup(F){const c=new m({html:!0,linkify:!0,typographer:!0}),l=decodeURIComponent(Array.prototype.map.call(atob(R),G=>"%"+("00"+G.charCodeAt(0).toString(16)).slice(-2)).join("")),W=c.render(l),B=Y(()=>l.replace(/<\/?[^>]+(>|$)/g,"").slice(0,160));return y({title:Z,meta:[{name:"description",content:B+(B.value.length===160?"...":"")},{property:"og:title",content:Z},{property:"og:image",content:I}]}),(G,z)=>(h(),V("article",{class:g(G.$style.container)},[b("div",{class:g(G.$style.featuredImage)},[b("img",{src:I,class:g(G.$style.img)},null,2)],2),b("h1",{class:g(G.$style.title)},a(Z),2),b("div",{class:g(G.$style.content),innerHTML:X(W)},null,10,H)],2))}}),v="_container_g8988_1",N="_featuredImage_g8988_12",u="_img_g8988_20",s="_title_g8988_26",n="_content_g8988_41",o={container:v,featuredImage:N,img:u,title:s,content:n},J={$style:o},S=C(p,[["__cssModules",J]]);export{S as default};
