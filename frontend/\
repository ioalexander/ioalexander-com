import { FastifyInstance, FastifyReply, FastifyRequest } from "fastify";
import { FormSubmissionContactRepository } from "../repositories/form-submission-contact.repository";
import dataSource from "../../db/dataSource";
import { z } from "zod";
import geoip from "geoip-lite";
import { validateTurnstile } from "../shared/cloudflare/turnstile";

const formSubmitContactSchema = z.object({
  firstName: z
    .string()
    .min(1, { message: "First name is required" })
    .max(50, { message: "First name must be at most 50 characters" }),
  lastName: z
    .string()
    .min(1, { message: "Last name is required" })
    .max(50, { message: "Last name must be at most 50 characters" }),
  email: z
    .string()
    .email({ message: "Invalid email address" })
    .max(1000, { message: "Email must be at most 1000 characters" }),
  phone: z
    .string()
    .max(100, { message: "Phone must be at most 100 characters" })
    .optional(),
  message: z
    .string()
    .min(1, { message: "Message is required" })
    .max(10000, { message: "Message must be at most 10000 characters" }),
  turnstile: z
    .string()
    .min(1, { message: "Captcha is required" })
    .max(1000, { message: "Captcha must be at most 1000 characters" }),
});

type FormSubmitContactDto = z.infer<typeof formSubmitContactSchema>;

export async function formRoutes(fastify: FastifyInstance) {
  const repository = new FormSubmissionContactRepository(dataSource);

  fastify.post(
    "/form/submit/contact",
    async (request: FastifyRequest, reply: FastifyReply) => {
      const body: FormSubmitContactDto = formSubmitContactSchema.parse(
        request.body,
      );

      const isTurnstileValid = await validateTurnstile(
        body.turnstile,
        request.ip,
      );
      if (!isTurnstileValid) {
        reply.code(403).send({ message: "Captcha failed" });
        return;
      }

      try {
        const userAgent = request.headers["user-agent"] || "";

        const geo = geoip.lookup(request.ip);

        const submission = await repository.create({
          answerFirstName: body.firstName,
          answerLastName: body.lastName,
          answerEmail: body.email,
          answerPhone: body.phone,
          answerMessage: body.message,
          userAgent,
          country: geo?.country,
          city: geo?.city,
        });

        reply.code(201).send({ id: submission.id });
      } catch (err) {
        reply.code(500).send({ message: "Failed to submit form" });
      }
    },
  );
}
